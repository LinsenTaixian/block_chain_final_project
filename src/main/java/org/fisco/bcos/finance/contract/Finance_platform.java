package org.fisco.bcos.finance.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Finance_platform extends Contract {
    public static final String[] BINARY_ARRAY = {"","5050505050602060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b81019080805190602001909291905050509050600181141515610d7d57600098505b8273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610ede578082015181840152602081019050610ec3565b50505050905090810190601f168015610f0b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610f2b57600080fd5b505af1158015610f3f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c87016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f637265646974000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18d848673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561108757600080fd5b505af115801561109b573d6000803e3d6000fd5b505050506040513d60208110156110b157600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015611191578082015181840152602081019050611176565b50505050905090810190601f1680156111be5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156111df57600080fd5b505af11580156111f3573d6000803e3d6000fd5b505050506040513d602081101561120957600080fd5b8101908080519060200190929190505050905060018114151561122b57600098505b611235565b600098505b7fa0e04f02fb6aef138eac1be2a85826e7f9edb8c663459b2d0bee18182a71cdb2898e8e8e60405180851515151581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156112ae578082015181840152602081019050611293565b50505050905090810190601f1680156112db5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156113145780820151818401526020810190506112f9565b50505050905090810190601f1680156113415780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a18899505050505050505050509392505050565b6000806000606080600080600080600060019850600094506113868e611975565b809850819950829a50839b505050505061139f8c612def565b80945081955050508780156113b15750835b80156113bd57508a8512155b156113ff576113ce8e8c8703613798565b915081156113f5576113e28d888e8e61261e565b90508015156113f057600098505b6113fa565b600098505b611404565b600098505b7f3f42ecd0146a9539183aa749ae6b7ff0b8890fd97b29cdfeb4cc07faa38a94f8898f8f8f8f6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015611482578082015181840152602081019050611467565b50505050905090810190601f1680156114af5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b838110156114e85780820151818401526020810190506114cd565b50505050905090810190601f1680156115155780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b8381101561154e578082015181840152602081019050611533565b50505050905090810190601f16801561157b5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1889950505050505050505050949350505050565b6000806000606080600080600080600197506115bd8a611975565b809750819850829950839a50505050508680156115da5750600084145b156118b85761100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561168457600080fd5b505af1158015611698573d6000803e3d6000fd5b505050506040513d60208110156116ae57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff166328bb21178b8473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561174257600080fd5b505af1158015611756573d6000803e3d6000fd5b505050506040513d602081101561176c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561181a5780820151818401526020810190506117ff565b50505050905090810190601f1680156118475780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561186757600080fd5b505af115801561187b573d6000803e3d6000fd5b505050506040513d602081101561189157600080fd5b810190808051906020019092919050505090506001811415156118b357600097505b6118bd565b600097505b7fb872ab944d29b4661b9e3fda5381e886d1f9a2d4aa78e370e8fb2afacb2dfc24888b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561192a57808201518184015260208101905061190f565b50505050905090810190601f1680156119575780820380516001836020036101000a031916815260200191505b50935050505060405180910390a18798505050505050505050919050565b60006060806000806000806000606080600061100196508673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611a2c57600080fd5b505af1158015611a40573d6000803e3d6000fd5b505050506040513d6020811015611a5657600080fd5b81019080805190602001909291905050509550600194508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398d8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611aee57600080fd5b505af1158015611b02573d6000803e3d6000fd5b505050506040513d6020811015611b1857600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611bc6578082015181840152602081019050611bab565b50505050905090810190601f168015611bf35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611c1357600080fd5b505af1158015611c27573d6000803e3d6000fd5b505050506040513d6020811015611c3d57600080fd5b810190808051906020019092919050505093506000905060018473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b505050506040513d6020811015611ce457600080fd5b81019080805190602001909291905050501415612241578373ffffffffffffffffffffffffffffffffffffffff16","63846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611d6b57600080fd5b505af1158015611d7f573d6000803e3d6000fd5b505050506040513d6020811015611d9557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611e8357600080fd5b810190808051640100000000811115611e9b57600080fd5b82810190506020810184811115611eb157600080fd5b8151856001820283011164010000000082111715611ece57600080fd5b505092919050505092508373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f4857600080fd5b505af1158015611f5c573d6000803e3d6000fd5b505050506040513d6020811015611f7257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561206057600080fd5b81019080805164010000000081111561207857600080fd5b8281019050602081018481111561208e57600080fd5b81518560018202830111640100000000821117156120ab57600080fd5b505092919050505091508373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561212557600080fd5b505af1158015612139573d6000803e3d6000fd5b505050506040513d602081101561214f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f6d6f6e6579000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b505050506040513d602081101561222957600080fd5b81019080805190602001909291905050509050612246565b600094505b848383839a509a509a509a50505050505050509193509193565b6000806000806000806000600195506000945061227c88612def565b809550819650505084156125635761100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561232f57600080fd5b505af1158015612343573d6000803e3d6000fd5b505050506040513d602081101561235957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff166328bb2117898473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050506040513d602081101561241757600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156124c55780820151818401526020810190506124aa565b50505050905090810190601f1680156124f25780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050506040513d602081101561253c57600080fd5b8101908080519060200190929190505050905060018114151561255e57600095505b612568565b600095505b7ffa768918c9c137de5a0abe021c877c61509223b7090b86e25c60b9dda4838be28689604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156125d55780820151818401526020810190506125ba565b50505050905090810190601f1680156126025780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1859650505050505050919050565b6000806000606080600080600080600197506126398d611975565b809750819850829950839a5050505050861515612c4d5761100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156126f557600080fd5b505af1158015612709573d6000803e3d6000fd5b505050506040513d602081101561271f57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561279657600080fd5b505af11580156127aa573d6000803e3d6000fd5b505050506040513d60208110156127c057600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612893578082015181840152602081019050612878565b50505050905090810190601f1680156128c05780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156128e057600080fd5b505af11580156128f4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156129b857808201518184015260208101905061299d565b50505050905090810190601f1680156129e55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612a0557600080fd5b505af1158015612a19573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f6d6f6e657900000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015612ac557600080fd5b505af1158015612ad9573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac368f846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612b9a578082015181840152602081019050612b7f565b50505050905090810190601f168015612bc75780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050506040513d6020811015612c1157600080fd5b81019080805190602001909291905050501415612c4357612c338c8c8c61079d565b1515612c3e57600097505b612c48565b600097505b612c52565b600097505b7f94ee752a0083137c96b7435faf0e9941af52cbe8cd6df68f20c86576d4be97b6888e8e8e8e6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015612cd0578082015181840152602081019050612cb5565b50505050905090810190601f168015612cfd5780820380516001836020036101000a031916815260200191505b508481038352878181518152602001915080519060","20019080838360005b83811015612d36578082015181840152602081019050612d1b565b50505050905090810190601f168015612d635780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015612d9c578082015181840152602081019050612d81565b50505050905090810190601f168015612dc95780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a18798505050505050505050949350505050565b60008060008060008060006001945061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b505050506040513d6020811015612ecd57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39898573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f6157600080fd5b505af1158015612f75573d6000803e3d6000fd5b505050506040513d6020811015612f8b57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561303957808201518184015260208101905061301e565b50505050905090810190601f1680156130665780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b505050506040513d60208110156130b057600080fd5b810190808051906020019092919050505091506000905060018273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561312d57600080fd5b505af1158015613141573d6000803e3d6000fd5b505050506040513d602081101561315757600080fd5b810190808051906020019092919050505014156132fa578173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156131de57600080fd5b505af11580156131f2573d6000803e3d6000fd5b505050506040513d602081101561320857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f6372656469740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156132b857600080fd5b505af11580156132cc573d6000803e3d6000fd5b505050506040513d60208110156132e257600080fd5b810190808051906020019092919050505090506132ff565b600094505b8481965096505050505050915091565b600080600080600080600080600196506133288a612def565b80965081975050508515156136d35761100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156133dc57600080fd5b505af11580156133f0573d6000803e3d6000fd5b505050506040513d602081101561340657600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561347d57600080fd5b505af1158015613491573d6000803e3d6000fd5b505050506040513d60208110156134a757600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f637265646974000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561356257600080fd5b505af1158015613576573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561363557808201518184015260208101905061361a565b50505050905090810190601f1680156136625780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561368257600080fd5b505af1158015613696573d6000803e3d6000fd5b505050506040513d60208110156136ac57600080fd5b810190808051906020019092919050505090506001811415156136ce57600096505b6136d8565b600096505b7f7ff9b0f01944236a8703ed5188bba989aa702a658f7e3e117f970bcc6631d50c878b8b604051808415151515815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561374c578082015181840152602081019050613731565b50505050905090810190601f1680156137795780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18697505050505050505092915050565b6000806000606080600080600080600080600199506137b68d611975565b809950819a50829b50839c50505050508880156137d357508b8612155b15613eaf5761100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561387d57600080fd5b505af1158015613891573d6000803e3d6000fd5b505050506040513d60208110156138a757600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561391e57600080fd5b505af1158015613932573d6000803e3d6000fd5b505050506040513d602081101561394857600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613a1b578082015181840152602081019050613a00565b50505050905090810190601f168015613a485780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613a6857600080fd5b505af1158015613a7c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613b40578082015181840152602081019050613b25565b50505050905090810190601f168015613b6d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613b8d57600080fd5b505af1158015613ba1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f6d6f6e657900000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015613c4d57600080fd5b505af1158015613c61573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18e858773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613ce757600080fd5b505af1158015613cfb573d6000803e3d6000fd5b505050506040513d6020811015613d1157600080fd5b81","019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015613df1578082015181840152602081019050613dd6565b50505050905090810190601f168015613e1e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015613e3f57600080fd5b505af1158015613e53573d6000803e3d6000fd5b505050506040513d6020811015613e6957600080fd5b810190808051906020019092919050505091506001821415613ea557613e9287898e890361079d565b9050801515613ea057600099505b613eaa565b600099505b613eb4565b600099505b7f2c87918e8697f5d83b0cbf52f070ed1dec0aa981c326a3db9b953dedf3bb6bb58a8e8e604051808415151515815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613f28578082015181840152602081019050613f0d565b50505050905090810190601f168015613f555780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1899a5050505050505050505050929150505600a165627a7a723058205dd93a003d0c77b747dad642d0edd92dd48fce4f90215298129a0468b0bd66550029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b620002dd565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001848103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001848103825260068152602001807f63726564697400000000000000000000000000000000000000000000000000008152506020019350505050602060405180830381600087803b1580156200014b57600080fd5b505af115801562000160573d6000803e3d6000fd5b505050506040513d60208110156200017757600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001848103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001848103825260118152602001807f616363312c20616363322c206d6f6e65790000000000000000000000000000008152506020019350505050602060405180830381600087803b1580156200029c57600080fd5b505af1158015620002b1573d6000803e3d6000fd5b505050506040513d6020811015620002c857600080fd5b81019080805190602001909291905050505050565b613fa380620002ed6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631687872c1461009e5780632fa47a94146101fe578063597f806414610286578063b5fcafc014610307578063bbd51fb01461041e578063cf5b1a01146104a9578063de8bd8381461057a578063eb8aa2c414610605578063f40f99101461071c575b600080fd5b3480156100aa57600080fd5b50610105600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061079d565b60405180851515151581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561015957808201518184015260208101905061013e565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156101bf5780820151818401526020810190506101a4565b50505050905090810190601f1680156101ec5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561020a57600080fd5b50610265600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611088565b60405180831515151581526020018281526020019250505060405180910390f35b34801561029257600080fd5b506102ed600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506115a8565b604051808215151515815260200191505060405180910390f35b34801561031357600080fd5b50610404600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611966565b604051808215151515815260200191505060405180910390f35b34801561042a57600080fd5b5061048f600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611ba3565b604051808215151515815260200191505060405180910390f35b3480156104b557600080fd5b50610560600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061202c565b604051808215151515815260200191505060405180910390f35b34801561058657600080fd5b506105eb600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050612bf4565b604051808215151515815260200191505060405180910390f35b34801561061157600080fd5b50610702600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506133d3565b604051808215151515815260200191505060405180910390f35b34801561072857600080fd5b50610783600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613ba4565b604051808215151515815260200191505060405180910390f35b60006060806000806000806000606080600061100196508673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b505050506040513d602081101561087e57600080fd5b81019080805190602001909291905050509550600194508573ffffffffffffffffffffffffffffffffffffffff1663d8ac59578d8873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b505050506040513d602081101561094057600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156109ee5780820151818401526020810190506109d3565b50505050905090810190601f168015610a1b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610a3b57600080fd5b505af1158015610a4f573d6000803e3d6000fd5b505050506040513d6020811015610a6557600080fd5b810190808051906020019092919050505093506000905060018473ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b505050506040513d6020811015610b0c57600080fd5b81019080805190602001909291905050501415611069578373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610b9357600080fd5b505af1158015610ba7573d6000803e3d6000fd5b505050506040513d6020811015610bbd57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610cab57600080fd5b810190808051640100000000811115610cc357600080fd5b82810190506020810184811115610cd957600080fd5b8151856001820283011164010000000082111715610cf657600080fd5b505092919050505092508373ffffffffffffffffffffffffffffffff","ffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610d7057600080fd5b505af1158015610d84573d6000803e3d6000fd5b505050506040513d6020811015610d9a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610e4a57600080fd5b505af1158015610e5e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610e8857600080fd5b810190808051640100000000811115610ea057600080fd5b82810190506020810184811115610eb657600080fd5b8151856001820283011164010000000082111715610ed357600080fd5b505092919050505091508373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d6020811015610f7757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f6d6f6e6579000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561102757600080fd5b505af115801561103b573d6000803e3d6000fd5b505050506040513d602081101561105157600080fd5b8101908080519060200190929190505050905061106e565b600094505b848383839a509a509a509a50505050505050509193509193565b60008060008060008060006001945061100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561113c57600080fd5b505af1158015611150573d6000803e3d6000fd5b505050506040513d602081101561116657600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac5957898573ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156111fa57600080fd5b505af115801561120e573d6000803e3d6000fd5b505050506040513d602081101561122457600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156112d25780820151818401526020810190506112b7565b50505050905090810190601f1680156112ff5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506040513d602081101561134957600080fd5b810190808051906020019092919050505091506000905060018273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b81019080805190602001909291905050501415611593578173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b505050506040513d60208110156114a157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f6372656469740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b505050506040513d602081101561157b57600080fd5b81019080805190602001909291905050509050611598565b600094505b8481965096505050505050915091565b600080600080600080600060019550600094506115c488611088565b809550819650505084156118ab5761100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d60208110156116a157600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff166309ff42f0898473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561173557600080fd5b505af1158015611749573d6000803e3d6000fd5b505050506040513d602081101561175f57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561180d5780820151818401526020810190506117f2565b50505050905090810190601f16801561183a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561185a57600080fd5b505af115801561186e573d6000803e3d6000fd5b505050506040513d602081101561188457600080fd5b810190808051906020019092919050505090506001811415156118a657600095505b6118b0565b600095505b7f5d1e0f66db6850e3a63ced2c58def9b6eb8fc532dd150dc0dd2518e5758350f88689604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561191d578082015181840152602081019050611902565b50505050905090810190601f16801561194a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1859650505050505050919050565b6000806000606080600080600080600060019850600094506119878e61079d565b809850819950829a50839b50505050506119a08c611088565b80945081955050508780156119b25750835b80156119be57508a8512155b15611a00576119cf8e8c8703612bf4565b915081156119f6576119e38d888e8e6133d3565b90508015156119f157600098505b6119fb565b600098505b611a05565b600098505b7f795edd425ab65d8878c9558818d4de0a5020ff536716306f5a30e86f38d7a325898f8f8f8f6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015611a83578082015181840152602081019050611a68565b50505050905090810190601f168015611ab05780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015611ae9578082015181840152602081019050611ace565b50505050905090810190601f168015611b165780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015611b4f578082015181840152602081019050611b34565b50505050905090810190601f168015611b7c5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1889950505050505050505050949350505050565b60008060008060008060008060019650611bbc8a611088565b8096508197505050851515611f675761100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b505050506040513d6020811015611c9a57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d1157600080fd5b50","5af1158015611d25573d6000803e3d6000fd5b505050506040513d6020811015611d3b57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f637265646974000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611ec9578082015181840152602081019050611eae565b50505050905090810190601f168015611ef65780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611f1657600080fd5b505af1158015611f2a573d6000803e3d6000fd5b505050506040513d6020811015611f4057600080fd5b81019080805190602001909291905050509050600181141515611f6257600096505b611f6c565b600096505b7f855da373ca4fb20d7840be3e0c6fa15dfb2c69a772802e3d5d82f262be8fb4e5878b8b604051808415151515815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611fe0578082015181840152602081019050611fc5565b50505050905090810190601f16801561200d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18697505050505050505092915050565b600080600080600080600080600080600198506120488d611088565b80985081995050506120598c611088565b809650819750505087801561206b5750855b801561207757508a8712155b15612abf5761100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f656e74697479000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b505050506040513d602081101561214b57600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156121c257600080fd5b505af11580156121d6573d6000803e3d6000fd5b505050506040513d60208110156121ec57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156122bf5780820151818401526020810190506122a4565b50505050905090810190601f1680156122ec5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561230c57600080fd5b505af1158015612320573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988c89036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f637265646974000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156123ce57600080fd5b505af11580156123e2573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663664b37d68e848673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b505050506040513d602081101561249257600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015612572578082015181840152602081019050612557565b50505050905090810190601f16801561259f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156125c057600080fd5b505af11580156125d4573d6000803e3d6000fd5b505050506040513d60208110156125ea57600080fd5b8101908080519060200190929190505050905060018114151561260c57600098505b8273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561267057600080fd5b505af1158015612684573d6000803e3d6000fd5b505050506040513d602081101561269a57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561276d578082015181840152602081019050612752565b50505050905090810190601f16801561279a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156127ba57600080fd5b505af11580156127ce573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988c87016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f637265646974000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561287c57600080fd5b505af1158015612890573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663664b37d68d848673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b505050506040513d602081101561294057600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015612a20578082015181840152602081019050612a05565b50505050905090810190601f168015612a4d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612a6e57600080fd5b505af1158015612a82573d6000803e3d6000fd5b505050506040513d6020811015612a9857600080fd5b81019080805190602001909291905050509050600181141515612aba57600098505b612ac4565b600098505b7f0455c4c7452035eb45f3ebf1a1781236427a436bb491b8c5bb3c8c7e466b3969898e8e8e60405180851515151581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015612b3d578082015181840152602081019050612b22565b50505050905090810190601f168015612b6a5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015612ba3578082015181840152602081019050612b88565b50505050905090810190601f168015612bd05780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a18899505050505050505050509392505050565b600080600060608060008060008060008060019950612c128d61079d565b809950819a50829b50839c5050505050888015612c2f57508b8612155b1561330b5761100194508473ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015612cd957600080fd5b505af1158015612ced573d6000803e3d6000fd5b505050506040513d6020811015612d0357600080fd5b810190808051906020019092919050","505093508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612d7a57600080fd5b505af1158015612d8e573d6000803e3d6000fd5b505050506040513d6020811015612da457600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612e77578082015181840152602081019050612e5c565b50505050905090810190601f168015612ea45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612ec457600080fd5b505af1158015612ed8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612f9c578082015181840152602081019050612f81565b50505050905090810190601f168015612fc95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612fe957600080fd5b505af1158015612ffd573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f6d6f6e657900000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156130a957600080fd5b505af11580156130bd573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68e858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561314357600080fd5b505af1158015613157573d6000803e3d6000fd5b505050506040513d602081101561316d57600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561324d578082015181840152602081019050613232565b50505050905090810190601f16801561327a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561329b57600080fd5b505af11580156132af573d6000803e3d6000fd5b505050506040513d60208110156132c557600080fd5b810190808051906020019092919050505091506001821415613301576132ee87898e890361202c565b90508015156132fc57600099505b613306565b600099505b613310565b600099505b7f4d18ca6216e50a77b1b7e6e3e5e1234daf672a9bf36171cc87a6f878758ab7f58a8e8e604051808415151515815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613384578082015181840152602081019050613369565b50505050905090810190601f1680156133b15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1899a505050505050505050505092915050565b6000806000606080600080600080600197506133ee8d61079d565b809750819850829950839a5050505050861515613a025761100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156134aa57600080fd5b505af11580156134be573d6000803e3d6000fd5b505050506040513d60208110156134d457600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561354b57600080fd5b505af115801561355f573d6000803e3d6000fd5b505050506040513d602081101561357557600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633100000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561364857808201518184015260208101905061362d565b50505050905090810190601f1680156136755780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561369557600080fd5b505af11580156136a9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6163633200000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561376d578082015181840152602081019050613752565b50505050905090810190601f16801561379a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156137ba57600080fd5b505af11580156137ce573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f6d6f6e657900000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561387a57600080fd5b505af115801561388e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08f846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561394f578082015181840152602081019050613934565b50505050905090810190601f16801561397c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561399c57600080fd5b505af11580156139b0573d6000803e3d6000fd5b505050506040513d60208110156139c657600080fd5b810190808051906020019092919050505014156139f8576139e88c8c8c61202c565b15156139f357600097505b6139fd565b600097505b613a07565b600097505b7f54576d028de949c2c974eb48100ec80f5b176b601daac71ac1ddb61071307252888e8e8e8e6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015613a85578082015181840152602081019050613a6a565b50505050905090810190601f168015613ab25780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015613aeb578082015181840152602081019050613ad0565b50505050905090810190601f168015613b185780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015613b51578082015181840152602081019050613b36565b50505050905090810190601f168015613b7e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a18798505050505050505050949350505050565b600080600060608060008060008060019750613bbf8a61079d565b809750819850829950839a5050505050868015613bdc5750600084145b15613eba5761100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7472616e73616374696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b505050506040513d6020811015613cb057600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff166309ff42f08b8473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000","000000000000000000000000000000000000028152600401602060405180830381600087803b158015613d4457600080fd5b505af1158015613d58573d6000803e3d6000fd5b505050506040513d6020811015613d6e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613e1c578082015181840152602081019050613e01565b50505050905090810190601f168015613e495780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613e6957600080fd5b505af1158015613e7d573d6000803e3d6000fd5b505050506040513d6020811015613e9357600080fd5b81019080805190602001909291905050509050600181141515613eb557600097505b613ebf565b600097505b7fbd7b0d750419619c96994ad9e711e3b9ad623edd7e2c948c64ba8a2ef3eb0b28888b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613f2c578082015181840152602081019050613f11565b50505050905090810190601f168015613f595780820380516001836020036101000a031916815260200191505b50935050505060405180910390a187985050505050505050509190505600a165627a7a72305820eeac2659589e2fcfa0ed6b5748bc53dfc724d81ef2438332e3fc47193ef8566e0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"old_id\",\"type\":\"string\"},{\"name\":\"new_id\",\"type\":\"string\"},{\"name\":\"new_acc\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"splitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"selectTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"removeEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"acc1\",\"type\":\"string\"},{\"name\":\"acc2\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"addTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"string\"}],\"name\":\"selectEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"updateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"credit\",\"type\":\"int256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"AddTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"UpdateTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"old_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"new_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"new_acc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"SplitTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RemoveTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"}],\"name\":\"RemoveEntityEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_SPLITTRANSACTION = "splitTransaction";

    public static final String FUNC_REMOVETRANSACTION = "removeTransaction";

    public static final String FUNC_SELECTTRANSACTION = "selectTransaction";

    public static final String FUNC_REMOVEENTITY = "removeEntity";

    public static final String FUNC_ADDTRANSACTION = "addTransaction";

    public static final String FUNC_SELECTENTITY = "selectEntity";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATETRANSACTION = "updateTransaction";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ADDTRANSACTIONEVENT_EVENT = new Event("AddTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATETRANSACTIONEVENT_EVENT = new Event("UpdateTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event SPLITTRANSACTIONEVENT_EVENT = new Event("SplitTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVETRANSACTIONEVENT_EVENT = new Event("RemoveTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEENTITYEVENT_EVENT = new Event("RemoveEntityEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Finance_platform(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String from_account, String to_account, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt splitTransaction(String old_id, String new_id, String new_acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] splitTransaction(String old_id, String new_id, String new_acc, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSplitTransaction(String old_id, String new_id, String new_acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getSplitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getSplitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeTransaction(String id) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeTransaction(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveTransaction(String id) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple4<Boolean, String, String, BigInteger> selectTransaction(String id) throws ContractException {
        final Function function = new Function(FUNC_SELECTTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, String, String, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt removeEntity(String account) {
        final Function function = new Function(
                FUNC_REMOVEENTITY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeEntity(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEENTITY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveEntity(String account) {
        final Function function = new Function(
                FUNC_REMOVEENTITY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveEntityInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEENTITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveEntityOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEENTITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addTransaction(String id, String acc1, String acc2, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getAddTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getAddTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, BigInteger> selectEntity(String acc) throws ContractException {
        final Function function = new Function(FUNC_SELECTENTITY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt register(String account, BigInteger credit) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String account, BigInteger credit, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger credit) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(credit)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateTransaction(String id, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getUpdateTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.credit = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddTransactionEventEventResponse> getAddTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<AddTransactionEventEventResponse> responses = new ArrayList<AddTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddTransactionEventEventResponse typedResponse = new AddTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.acc1 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.acc2 = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateTransactionEventEventResponse> getUpdateTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATETRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateTransactionEventEventResponse> responses = new ArrayList<UpdateTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateTransactionEventEventResponse typedResponse = new UpdateTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SplitTransactionEventEventResponse> getSplitTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SPLITTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<SplitTransactionEventEventResponse> responses = new ArrayList<SplitTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SplitTransactionEventEventResponse typedResponse = new SplitTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.old_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.new_id = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.new_acc = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSplitTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSplitTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveTransactionEventEventResponse> getRemoveTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVETRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveTransactionEventEventResponse> responses = new ArrayList<RemoveTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveTransactionEventEventResponse typedResponse = new RemoveTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveEntityEventEventResponse> getRemoveEntityEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEENTITYEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveEntityEventEventResponse> responses = new ArrayList<RemoveEntityEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveEntityEventEventResponse typedResponse = new RemoveEntityEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveEntityEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEENTITYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveEntityEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEENTITYEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Finance_platform load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Finance_platform(contractAddress, client, credential);
    }

    public static Finance_platform deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Finance_platform.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String account;

        public BigInteger credit;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String from_account;

        public String to_account;

        public BigInteger amount;
    }

    public static class AddTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String id;

        public String acc1;

        public String acc2;

        public BigInteger money;
    }

    public static class UpdateTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String id;

        public BigInteger money;
    }

    public static class SplitTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String old_id;

        public String new_id;

        public String new_acc;

        public BigInteger money;
    }

    public static class RemoveTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String id;
    }

    public static class RemoveEntityEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String account;
    }
}
